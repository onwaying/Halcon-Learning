<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>*透视形变，图像矫正</c>
<c>*1、读取图像并分割</c>
<c>*2、获取形变区域轮廓，计算顶点坐标</c>
<c>*3、计算投影矩阵</c>
<c>*4、投影变换</c>
<c>*</c>
<c></c>
<l>dev_close_window ()</l>
<l>read_image (Image, 'data/display.jpg')    </l>
<c>*rgb2gray</c>
<l>rgb1_to_gray (Image, GrayImage)</l>
<c>*get img size</c>
<l>get_image_size (GrayImage, Width, Height)</l>
<c>*新建窗口适应图像大小</c>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (GrayImage)</l>
<c>*初始化角点坐标</c>
<l>xCoordConers :=[]</l>
<l>yCoordConers :=[]</l>
<c>*阈值处理</c>
<l>threshold (GrayImage, Region, 0,80)</l>
<c>*分离不相连的区域   连通域对应oepncv  int number = connectedComponentsWithStats(riceBW, out, stats,centroids,8,CV_16U);</c>
<l>connection (Region, ConnectedRegions)</l>
<c>*选择面积最大</c>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<c>*裁剪屏幕区域  求图像与连通域的交集</c>
<l>reduce_domain (GrayImage, SelectedRegions, ImageReduced)</l>
<l>get_image_size (ImageReduced, Width1, Height1)</l>
<c>*创建边缘轮廓  </c>
<l>gen_contour_region_xld (SelectedRegions, Contours, 'border')</l>
<c>*将轮廓分为边 、   将XLD轮廓分割成线段和圆弧或椭圆弧</c>
<l>segment_contours_xld (Contours, ContoursSplit, 'lines', 5, 4, 2)</l>
<c>*边 计数，方便循环</c>
<l>count_obj (ContoursSplit, Number)</l>
<c>*存储每条边的起点位置</c>
<l>for Index := 1 to Number by 1</l>
<c>*     从对象元组中选择对象</c>
<l>    select_obj (ContoursSplit, ObjectSelected, Index)</l>
<c>    *拟合每条边 通过线段近似XLD轮廓</c>
<c>*    itLineContourXld通过线段近似XLD等高线。它不执行输入轮廓的分割。</c>
<c>*     因此，我们必须确保每个轮廓对应于一个且只有一个线段。对于每个轮廓，</c>
<c>*     算子返回起始点(RowBegin, ColBegin)，结束点(RowEnd, ColEnd)，</c>
<c>*     以及由直线的法向量(Nr, Nc)及其到原点的距离Dist给出的轮廓的回归线，即直线方程由nr x + n cy - dist = 0</c>
<l>    fit_line_contour_xld (ObjectSelected,'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr1, Nc, Dist)</l>
<c>    *存储每条边的顶点x y坐标   tuple_concat 将两个元组连接到一个新元组</c>
<l>    tuple_concat (xCoordConers, RowBegin, xCoordConers)</l>
<l>    tuple_concat (yCoordConers, ColBegin, yCoordConers)</l>
<l>endfor</l>
<c>*投影变化</c>
<l>xOff := 100</l>
<l>yOff := 100 *  Height / Width</l>
<l>xTrans := [xOff,xOff,Width-xOff,Width-xOff]</l>
<l>yTrans := [yOff,yOff,Height-yOff,Height-yOff]</l>
<c>* 用给定的点对应计算齐次变换矩阵</c>
<l>hom_vector_to_proj_hom_mat2d (xCoordConers, yCoordConers, [1,1,1,1], xTrans, yTrans, [1,1,1,1], 'normalized_dlt', HomMat2D)</l>
<c>*  对图像应用投影变换</c>
<l>projective_trans_image(Image, TransImage, HomMat2D, 'bilinear', 'false', 'false')</l>
<l>dev_display (TransImage)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
